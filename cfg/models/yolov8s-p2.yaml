# YOLOv8s with P2 detection head (stride 4 added)
# depth/width 保持与 y8s 一致，方便公平对比
nc: 10  # 按你的数据集类别数修改
scales:
  # v8s: depth 0.33, width 0.50, max_channels (通常不需要指定，但格式需要3个值)
  s: [0.33, 0.50, 1024]

backbone:
  # [from, number, module, args]
  - [-1, 1, Conv, [64, 3, 2]]         # P1/2
  - [-1, 1, Conv, [128, 3, 2]]        # P2 (stride 4 feature)
  - [-1, 3, C2f, [128, True]]
  - [-1, 1, Conv, [256, 3, 2]]        # P3
  - [-1, 6, C2f, [256, True]]
  - [-1, 1, Conv, [512, 3, 2]]        # P4
  - [-1, 6, C2f, [512, True]]
  - [-1, 1, Conv, [1024, 3, 2]]       # P5
  - [-1, 3, C2f, [1024, True]]
  - [-1, 1, SPPF, [1024, 5]]

head:
  - [-1, 1, Conv, [512, 1, 1]]
  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]
  - [[-1, 6], 1, Concat, [1]]         # cat backbone P4
  - [-1, 3, C2f, [512]]               # P4'

  - [-1, 1, Conv, [256, 1, 1]]
  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]
  - [[-1, 4], 1, Concat, [1]]         # cat backbone P3
  - [-1, 3, C2f, [256]]               # P3'

  # 新增到 P2 的上采样分支
  - [-1, 1, Conv, [128, 1, 1]]
  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]
  - [[-1, 2], 1, Concat, [1]]         # cat backbone P2
  - [-1, 3, C2f, [128]]               # P2'

  # 自底向上聚合（保持轻量）
  - [-1, 1, Conv, [128, 3, 2]]
  - [[-1, 10], 1, Concat, [1]]        # 与 P3' 汇合
  - [-1, 3, C2f, [256]]               # P3''

  - [-1, 1, Conv, [256, 3, 2]]
  - [[-1, 7], 1, Concat, [1]]         # 与 P4' 汇合
  - [-1, 3, C2f, [512]]               # P4''

  - [-1, 1, Conv, [512, 3, 2]]
  - [[-1, 3], 1, Concat, [1]]         # 与 backbone SPPF 输出
  - [-1, 3, C2f, [1024]]              # P5''

  # Detect 层：新增 P2 分支，通道对应 [P2', P3'', P4'', P5'']
  # 索引需要根据实际层数调整，先使用相对索引测试
  - [[-4, -7, -10, -13], 1, Detect, [nc]]  # strides: [4, 8, 16, 32]